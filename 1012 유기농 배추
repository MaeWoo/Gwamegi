#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

// 좌표 구조체 선언
typedef struct Point {
	int x;
	int y;
}point;

// 스택
point stack[2500] = { 0 };
int top = -1;

// 스택 삽입
void push(int x, int y) {
	point key;
	key.x = x;
	key.y = y;
	stack[++top] = key;
}
// 스택 반환
point pop() {
	return stack[top--];
}

int main() {
	int t, m, n, k, cnt = 0;
	int list[51][51] = { 0 };
	int awr[1251] = { 0 };
	scanf("%d", &t);
	// 케이스 반복
	for (int i = 0; i < t; i++) {
		cnt = 0;
		top = -1;
		scanf("%d %d %d", &m, &n, &k);
		// 2차원 배열 (초기화)
		for (int o = 0; o < m; o++) {
			for (int p = 0; p < n; p++) {
				list[o][p] = 0;
			}
		}
		// 배추 지정
		point temp;
		for (int j = 0; j < k; j++) {
			scanf("%d %d", &temp.y, &temp.x);
			list[temp.y][temp.x] = 1;
		}
		/*
		// 배열 체크
		for (int o = 0; o < m; o++) {
			for (int p = 0; p < n; p++) {
				printf("%d ", list[o][p]);
			}
			printf("\n");
		}
		*/
		// 지렁이의 수 체크
		for (int j = 0; j < m; j++) {
			for (int k = 0; k < n; k++) {
				// 현재 위치에 배추가 있다면
				if (list[j][k] == 1) {
					int x = k, y = j;
					push(x, y);
					temp.x = x, temp.y = y; // 현재 위치
					while (top >= -1) {
						x = temp.x, y = temp.y; // 현재 위치 업데이트
						// 오른쪽 o
						if (list[y][x + 1] == 1) {
							if (list[y][x] == 0) {
								list[y][x] = 1;
							}
							else {
								list[y][x] = 0;
							}
							push(x + 1, y);
							temp.x++;
						}
						// 아래쪽 o
						else if (list[y + 1][x] == 1) {
							if (list[y][x] == 0) {
								list[y][x] = 1;
							}
							else {
								list[y][x] = 0;
							}
							push(x, y + 1);
							temp.y++;
						}
						// 왼쪽 o 
						else if (list[y][x - 1] == 1) {
							if (list[y][x] == 0) {
								list[y][x] = 1;
							}
							else {
								list[y][x] = 0;
							}
							push(x - 1, y);
							temp.x--;
						}
						// 위에 o
						else if (list[y - 1][x] == 1) {
							if (list[y][x] == 0) {
								list[y][x] = 1;
							}
							else {
								list[y][x] = 0;
							}
							push(x, y - 1);
							temp.y--;
						}
						// 근처에 배추 x
						else {
							list[y][x] = 0;
							if (top > -1) {
								temp = pop();

							}
							else {
								break;
							}
						}
					}
					cnt++;
				}
			}
		}
		awr[i] = cnt;
	}
	for (int i = 0; i < t; i++) {
		printf("%d\n", awr[i]);
	}
}
